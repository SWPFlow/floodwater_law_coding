filelist[file], sep = "/"),
sep = ";", stringsAsFactors = F,
fileEncoding = "ASCII",
encoding = "UTF-8")
write.csv2(imported_file,file = paste("./Appdata_recoded",filelist[file], sep = "/"),
sep = ";")
}
filelist <- list.files("./Appdata", pattern = ".csv")
lawfile_list <- as.list(rep(NA,length(filelist)))
# ===== fuck encoding - run this before redeploying if new files are added =====
for (file in seq_along(filelist)) {
imported_file <- read.csv(paste("./Appdata",
filelist[file], sep = "/"),
sep = ";", stringsAsFactors = F,
fileEncoding = "ASCII",
encoding = "UTF-8")
write.csv2(imported_file,file = paste("./Appdata_recoded",filelist[file], sep = "/"))
}
runApp()
filelist <- list.files("./Appdata", pattern = ".csv")
lawfile_list <- as.list(rep(NA,length(filelist)))
# ===== fuck encoding - run this before redeploying if new files are added =====
for (file in seq_along(filelist)) {
imported_file <- read.csv(paste("./Appdata",
filelist[file], sep = "/"),
sep = ";", stringsAsFactors = F,
fileEncoding = "ASCII",
encoding = "UTF-8")
write.csv2(imported_file,file = paste("./Appdata_recoded",filelist[file], sep = "/"))
}
runApp()
rm(list = ls())
library("shiny")
library("statnet")
library("GGally")
library("tidyr")
## DATA DESCRIPTION
# We (Andrea Ghisletta) coded all Swiss national-level laws, and laws of the Canton of Bern
# which relate to flood protection.
# He coded different types of "issues" addressed in the laws that address flood protection.
# see codebook with issues, domains, projects (=different levels of abstraction of issues)
#==================================================================================
## DATA ###
#==================================================================================
## IMPORT DATA
filelist <- list.files("./Appdata", pattern = ".csv")
lawfile_list <- as.list(rep(NA,length(filelist)))
# # ===== fuck encoding - run this before redeploying if new files are added =====
# for (file in seq_along(filelist)) {
#   imported_file <- read.csv(paste("./Appdata",
#                                   filelist[file], sep = "/"),
#                             sep = ";", stringsAsFactors = F,
#                             fileEncoding = "ASCII",
#                             encoding = "UTF-8")
#   write.csv2(imported_file,file = paste("./Appdata_recoded",filelist[file], sep = "/"))
#   }
for (file in seq_along(filelist)) {
imported_file <- read.csv(paste("./Appdata_recoded",
filelist[file], sep = "/"),
sep = ";", stringsAsFactors = F,
fileEncoding = "ASCII",
encoding = "UTF-8", strip.white = T)
# imported_file <- apply(imported_file, 2, enc2native)
# imported_file <- apply(imported_file, 2, iconv, from = "", to = "UTF-8")
# imported_file <- as.data.frame(imported_file)
assign(sub(filelist[file], pattern = ".csv", replacement = ""), imported_file)
lawfile_list[[file]] <- get(sub(filelist[file], pattern = ".csv", replacement = ""))
}
View(issuelist)
View(NHG)
View(StAV)
# ===== fuck encoding - run this before redeploying if new files are added =====
for (file in seq_along(filelist)) {
imported_file <- read.csv(paste("./Appdata",
filelist[file], sep = "/"),
sep = ";", stringsAsFactors = F,
fileEncoding = "ANSI",
encoding = "UTF-8")
write.csv2(imported_file,file = paste("./Appdata_recoded",filelist[file], sep = "/"))
}
filelist <- list.files("./Appdata", pattern = ".csv")
lawfile_list <- as.list(rep(NA,length(filelist)))
# ===== fuck encoding - run this before redeploying if new files are added =====
for (file in seq_along(filelist)) {
imported_file <- read.csv(paste("./Appdata",
filelist[file], sep = "/"),
sep = ";", stringsAsFactors = F,
fileEncoding = "ANSI",
encoding = "UTF-8")
write.csv2(imported_file,file = paste("./Appdata_recoded",filelist[file], sep = "/"))
}
filelist <- list.files("./Appdata", pattern = ".csv")
lawfile_list <- as.list(rep(NA,length(filelist)))
# ===== fuck encoding - run this before redeploying if new files are added =====
for (file in seq_along(filelist)) {
imported_file <- read.csv(paste("./Appdata",
filelist[file], sep = "/"),
sep = ";", stringsAsFactors = F,
fileEncoding = "ANSI")
write.csv2(imported_file,file = paste("./Appdata_recoded",filelist[file], sep = "/"))
}
filelist <- list.files("./Appdata", pattern = ".csv")
lawfile_list <- as.list(rep(NA,length(filelist)))
# ===== fuck encoding - run this before redeploying if new files are added =====
for (file in seq_along(filelist)) {
imported_file <- read.csv(paste("./Appdata",
filelist[file], sep = "/"),
sep = ";", stringsAsFactors = F,
encoding = "ANSI")
write.csv2(imported_file,file = paste("./Appdata_recoded",filelist[file], sep = "/"))
}
for (file in seq_along(filelist)) {
imported_file <- read.csv(paste("./Appdata",
filelist[file], sep = "/"),
sep = ";", stringsAsFactors = F,
encoding = "ANSI")
write.csv2(imported_file,file = paste("./Appdata_recoded",filelist[file], sep = "/"))
}
View(imported_file)
for (file in seq_along(filelist)) {
imported_file <- read.csv(paste("./Appdata",
filelist[file], sep = "/"),
sep = ";", stringsAsFactors = F,
encoding = "ASCII")
write.csv2(imported_file,file = paste("./Appdata_recoded",filelist[file], sep = "/"))
}
View(imported_file)
imported_file <- read.csv(paste("./Appdata",
filelist[file], sep = "/"),
sep = ";", stringsAsFactors = F,
TF-")8
write.csv2(imported_file,file = paste("./Appdata_recoded",filelist[file], sep = "/"))
}
for (file in seq_along(filelist)) {
imported_file <- read.csv(paste("./Appdata_recoded",
filelist[file], sep = "/"),
sep = ";", stringsAsFactors = F,
fileEncoding = "UTF-8",
encoding = "UTF-8", strip.white = T)
assign(sub(filelist[file], pattern = ".csv", replacement = ""), imported_file)
lawfile_list[[file]] <- get(sub(filelist[file], pattern = ".csv", replacement = ""))
}
#==================================================================================
## EDGELISTS ##
#==================================================================================
#### ------- create edgelists for all legal texts ------ ####
prepare_el <- function(law_file, law_name){
law_file <- law_file[-c(2,3,4)] # remove all unneccessary variables
law_file[law_file == ""] <- NA # empty cells as NA
law_file[law_file == "NA"] <- NA
law_file[is.na(law_file)] <- NA
law_file$law <- paste(rep(law_name,nrow(law_file)),law_file$article_number)
str_mat <- apply(law_file[,c(3:ncol(law_file) - 1) ], 1, paste)
colnames(str_mat) <- law_file$law
namevec <- unlist(lapply(law_file$law,FUN = rep, nrow(str_mat)))
issuevec <- c(str_mat)
law_file_el <- cbind(namevec, issuevec)
law_file_el <- law_file_el[law_file_el[,2] != "NA",]
return(law_file_el)
}
for (object in c(1:length(lawfile_list))){
name <- paste(sub(filelist[object], pattern = ".csv", replacement = ""),"_el", sep = "")
assign(name, prepare_el(lawfile_list[[object]], name))
}
#### ----- bind all edgelists into one edgelist --------
el <- rbind(AuenV_el, BV_el, BZG_el, GSchG_el, GSchV_el, NHG_el, NHV_el, RPG_el, RPV_el, StAG_el, StAV_el, VNAZ_el, VWAS_el, WaG_el, WaV_el, WBG_el, WBV_el)
el <- as.data.frame(el)
colnames(el) <- c("article","issue")
## --- create a list of law names -------
lawname_list <- unlist(lapply(filelist, sub, pattern = ".csv", replacement = ""))
lawname_list <- lawname_list[lawname_list != c("issuelist")]
for (file in seq_along(filelist)) {
imported_file <- read.csv(paste("./Appdata",
filelist[file], sep = "/"),
sep = ";", stringsAsFactors = F,
encoding = "UTF-8")
write.csv2(imported_file,file = paste("./Appdata_recoded",filelist[file], sep = "/"))
}
View(imported_file)
for (file in seq_along(filelist)) {
imported_file <- read.csv(paste("./Appdata",
filelist[file], sep = "/"),
sep = ";", stringsAsFactors = F,
encoding = "ANSI")
imported_file <- apply(imported_file, 2, enc2native)
imported_file <- apply(imported_file, 2, iconv, from = "", to = "UTF-8")
imported_file <- as.data.frame(imported_file)
write.csv2(imported_file,file = paste("./Appdata_recoded",filelist[file], sep = "/"))
}
View(imported_file)
runApp()
filelist <- list.files("./Appdata", pattern = ".csv")
lawfile_list <- as.list(rep(NA,length(filelist)))
for (file in seq_along(filelist)) {
imported_file <- read.csv(paste("./Appdata_recoded",
filelist[file], sep = "/"),
sep = ";", stringsAsFactors = F,
fileEncoding = "UTF-8",
encoding = "UTF-8", strip.white = T)
assign(sub(filelist[file], pattern = ".csv", replacement = ""), imported_file)
lawfile_list[[file]] <- get(sub(filelist[file], pattern = ".csv", replacement = ""))
}
warnings()
for (file in seq_along(filelist)) {
imported_file <- read.csv(paste("./Appdata",
filelist[file], sep = "/"),
sep = ";", stringsAsFactors = F,
encoding = "ASCII")
imported_file <- apply(imported_file, 2, enc2native)
imported_file <- apply(imported_file, 2, iconv, from = "", to = "UTF-8")
imported_file <- as.data.frame(imported_file)
write.csv2(imported_file,file = paste("./Appdata_recoded",filelist[file], sep = "/"))
}
for (file in seq_along(filelist)) {
imported_file <- read.csv(paste("./Appdata",
filelist[file], sep = "/"),
sep = ";", stringsAsFactors = F,
fileEncoding = "ANSI")
imported_file <- apply(imported_file, 2, enc2native)
imported_file <- apply(imported_file, 2, iconv, from = "", to = "UTF-8")
imported_file <- as.data.frame(imported_file)
write.csv2(imported_file,file = paste("./Appdata_recoded",filelist[file], sep = "/"))
}
for (file in seq_along(filelist)) {
imported_file <- read.csv(paste("./Appdata",
filelist[file], sep = "/"),
sep = ";", stringsAsFactors = F,
fileEncoding = "ASCII")
imported_file <- apply(imported_file, 2, enc2native)
imported_file <- apply(imported_file, 2, iconv, from = "", to = "UTF-8")
imported_file <- as.data.frame(imported_file)
write.csv2(imported_file,file = paste("./Appdata_recoded",filelist[file], sep = "/"))
}
View(imported_file)
for (file in seq_along(filelist)) {
imported_file <- read.csv(paste("./Appdata",
filelist[file], sep = "/"),
sep = ";", stringsAsFactors = F,
fileEncoding = "ANSI", encoding = "")
# imported_file <- apply(imported_file, 2, enc2native)
# imported_file <- apply(imported_file, 2, iconv, from = "", to = "UTF-8")
# imported_file <- as.data.frame(imported_file)
write.csv2(imported_file,file = paste("./Appdata_recoded",filelist[file], sep = "/"))
}
for (file in seq_along(filelist)) {
imported_file <- read.csv(paste("./Appdata",
filelist[file], sep = "/"),
sep = ";", stringsAsFactors = F,
fileEncoding = "ASCII", encoding = "")
# imported_file <- apply(imported_file, 2, enc2native)
# imported_file <- apply(imported_file, 2, iconv, from = "", to = "UTF-8")
# imported_file <- as.data.frame(imported_file)
write.csv2(imported_file,file = paste("./Appdata_recoded",filelist[file], sep = "/"))
}
View(imported_file)
for (file in seq_along(filelist)) {
imported_file <- read.csv(paste("./Appdata",
filelist[file], sep = "/"),
sep = ";", stringsAsFactors = F,
fileEncoding = "ASCII", encoding = "UTF-8")
# imported_file <- apply(imported_file, 2, enc2native)
# imported_file <- apply(imported_file, 2, iconv, from = "", to = "UTF-8")
# imported_file <- as.data.frame(imported_file)
write.csv2(imported_file,file = paste("./Appdata_recoded",filelist[file], sep = "/"))
}
View(imported_file)
runApp()
for (file in seq_along(filelist)) {
imported_file <- read.csv(paste("./Appdata",
filelist[file], sep = "/"),
sep = ";", stringsAsFactors = F,
fileEncoding = "ANSI")
# imported_file <- apply(imported_file, 2, enc2native)
# imported_file <- apply(imported_file, 2, iconv, from = "", to = "UTF-8")
# imported_file <- as.data.frame(imported_file)
write.csv2(imported_file,file = paste("./Appdata_recoded",filelist[file], sep = "/"))
}
for (file in seq_along(filelist)) {
imported_file <- read.csv(paste("./Appdata",
filelist[file], sep = "/"),
sep = ";", stringsAsFactors = F,
encoding =  = "ANSI")
# imported_file <- apply(imported_file, 2, enc2native)
# imported_file <- apply(imported_file, 2, iconv, from = "", to = "UTF-8")
# imported_file <- as.data.frame(imported_file)
write.csv2(imported_file,file = paste("./Appdata_recoded",filelist[file], sep = "/"))
}
for (file in seq_along(filelist)) {
imported_file <- read.csv(paste("./Appdata",
filelist[file], sep = "/"),
sep = ";", stringsAsFactors = F,
encoding =  = "ANSI")
# imported_file <- apply(imported_file, 2, enc2native)
# imported_file <- apply(imported_file, 2, iconv, from = "", to = "UTF-8")
# imported_file <- as.data.frame(imported_file)
write.csv2(imported_file,file = paste("./Appdata_recoded",filelist[file], sep = "/"))
}
for (file in seq_along(filelist)) {
imported_file <- read.csv(paste("./Appdata",
filelist[file], sep = "/"),
sep = ";", stringsAsFactors = F,
encoding = "ANSI")
# imported_file <- apply(imported_file, 2, enc2native)
# imported_file <- apply(imported_file, 2, iconv, from = "", to = "UTF-8")
# imported_file <- as.data.frame(imported_file)
write.csv2(imported_file,file = paste("./Appdata_recoded",filelist[file], sep = "/"))
}
View(imported_file)
for (file in seq_along(filelist)) {
imported_file <- read.csv(paste("./Appdata",
filelist[file], sep = "/"),
sep = ";", stringsAsFactors = F,
encoding = "ANSI")
imported_file <- apply(imported_file, 2, enc2native)
imported_file <- apply(imported_file, 2, iconv, from = "", to = "UTF-8")
imported_file <- as.data.frame(imported_file)
write.csv2(imported_file,file = paste("./Appdata_recoded",filelist[file], sep = "/"))
}
View(imported_file)
for (file in seq_along(filelist)) {
imported_file <- read.csv(paste("./Appdata",
filelist[file], sep = "/"),
sep = ";", stringsAsFactors = F,
encoding = "ANSI")
imported_file <- apply(imported_file, 2, enc2native)
imported_file <- apply(imported_file, 2, iconv, from = "", to = "UTF-8")
imported_file <- as.data.frame(imported_file)
write.csv2(imported_file,file = paste("./Appdata_recoded",filelist[file], sep = "/"),
fileEncoding = "UTF-8")
}
runApp()
# ===== fuck encoding - run this before redeploying if new files are added =====
for (file in seq_along(filelist)) {
imported_file <- read.csv(paste("./Appdata",
filelist[file], sep = "/"),
sep = ";", stringsAsFactors = F,
encoding = "ANSI")
imported_file <- apply(imported_file, 2, enc2native)
imported_file <- apply(imported_file, 2, iconv, from = "", to = "UTF-8")
imported_file <- as.data.frame(imported_file)
write.csv2(imported_file,file = paste("./Appdata_recoded",filelist[file], sep = "/"))
}
# ===== fuck encoding - run this before redeploying if new files are added =====
for (file in seq_along(filelist)) {
imported_file <- read.csv(paste("./Appdata",
filelist[file], sep = "/"),
sep = ";", stringsAsFactors = F,
encoding = "ANSI")
# imported_file <- apply(imported_file, 2, enc2native)
# imported_file <- apply(imported_file, 2, iconv, from = "", to = "UTF-8")
# imported_file <- as.data.frame(imported_file)
write.csv2(imported_file,file = paste("./Appdata_recoded",filelist[file], sep = "/"),
fileEncoding = "UTF-8")
}
for (file in seq_along(filelist)) {
imported_file <- read.csv(paste("./Appdata_recoded",
filelist[file], sep = "/"),
sep = ";", stringsAsFactors = F,
fileEncoding = "UTF-8",
encoding = "UTF-8", strip.white = T)
assign(sub(filelist[file], pattern = ".csv", replacement = ""), imported_file)
lawfile_list[[file]] <- get(sub(filelist[file], pattern = ".csv", replacement = ""))
}
View(WBG)
View(AVO)
for (file in seq_along(filelist)) {
imported_file <- read.csv(paste("./Appdata_recoded",
filelist[file], sep = "/"),
sep = ";", stringsAsFactors = F,
encoding = "UTF-8", strip.white = T)
assign(sub(filelist[file], pattern = ".csv", replacement = ""), imported_file)
lawfile_list[[file]] <- get(sub(filelist[file], pattern = ".csv", replacement = ""))
}
View(WBG)
for (file in seq_along(filelist)) {
imported_file <- read.csv(paste("./Appdata",
filelist[file], sep = "/"),
sep = ";", stringsAsFactors = F,
encoding = "ANSI")
# imported_file <- apply(imported_file, 2, enc2native)
# imported_file <- apply(imported_file, 2, iconv, from = "", to = "UTF-8")
# imported_file <- as.data.frame(imported_file)
write.csv2(imported_file,file = paste("./Appdata_recoded",filelist[file], sep = "/"),
fileEncoding = "UTF-8")
}
for (file in seq_along(filelist)) {
imported_file <- read.csv(paste("./Appdata_recoded",
filelist[file], sep = "/"),
sep = ";", stringsAsFactors = F,
encoding = "UTF-8", strip.white = T)
assign(sub(filelist[file], pattern = ".csv", replacement = ""), imported_file)
lawfile_list[[file]] <- get(sub(filelist[file], pattern = ".csv", replacement = ""))
}
View(AuenV)
runApp()
View(WaG)
View(VWAS)
View(imported_file)
for (file in seq_along(filelist)) {
imported_file <- read.csv(paste("./Appdata",
filelist[file], sep = "/"),
sep = ";", stringsAsFactors = F,
encoding = "ANSI")
# imported_file <- import
write.csv2(imported_file,file = paste("./Appdata_recoded",filelist[file], sep = "/"),
fileEncoding = "UTF-8")
}
View(imported_file)
for (file in seq_along(filelist)) {
imported_file <- read.csv(paste("./Appdata_recoded",
filelist[file], sep = "/"),
sep = ";", stringsAsFactors = F,
encoding = "UTF-8", strip.white = T)
assign(sub(filelist[file], pattern = ".csv", replacement = ""), imported_file)
lawfile_list[[file]] <- get(sub(filelist[file], pattern = ".csv", replacement = ""))
}
View(imported_file)
for (file in seq_along(filelist)) {
imported_file <- read.csv(paste("./Appdata_recoded",
filelist[file], sep = "/"),
sep = ";", stringsAsFactors = F,
encoding = "UTF-8", strip.white = T)
# imported_file <- imported_file
assign(sub(filelist[file], pattern = ".csv", replacement = ""), imported_file)
lawfile_list[[file]] <- get(sub(filelist[file], pattern = ".csv", replacement = ""))
}
View(imported_file)
colnames(imported_file)
for (file in seq_along(filelist)) {
imported_file <- read.csv(paste("./Appdata_recoded",
filelist[file], sep = "/"),
sep = ";", stringsAsFactors = F,
encoding = "UTF-8", strip.white = T)
imported_file <- imported_file[,colnames(imported_file) != "X"]
assign(sub(filelist[file], pattern = ".csv", replacement = ""), imported_file)
lawfile_list[[file]] <- get(sub(filelist[file], pattern = ".csv", replacement = ""))
}
View(WBG)
runApp()
runApp()
runApp()
for (file in seq_along(filelist)) {
imported_file <- read.csv(paste("./original_data",
filelist[file], sep = "/"),
sep = ";", stringsAsFactors = F,
encoding = "ANSI")
# imported_file <- import
write.csv2(imported_file,file = paste("./appdata",filelist[file], sep = "/"),
fileEncoding = "UTF-8")
}
runApp()
runApp()
runApp()
c("Auenschutz","Raumplanungsinstrumente","Naturgefahren")
ui <- fluidPage(
# App title ----
titlePanel("The network of Swiss floodwater regulation across laws"),
hr(),
# Sidebar layout with input and output definitions ----
fluidRow(
# Sidebar panel for inputs ----
column(2,
checkboxGroupInput(inputId = "issue_choice",
label = "Which floodwater issues should be displayed?",
choices = unique(el$issue),
selected = c("Auenschutz","Raumplanungsinstrumente","Naturgefahren")),
column(2, style = "background-color:#FDFBFA;",
checkboxGroupInput(inputId = "law_choice",
label = "Which laws should be included?",
choices = lawname_list,
selected = lawname_list),
checkboxInput(inputId = "label_articles","Should articles be labeled?", TRUE)
),
# Main panel for displaying outputs ----
column(8,
plotOutput(outputId = "netplot")
)
)
)
# Define server logic ----
server <- function(input, output) {
# This reactive function subsets the edgelist every time the choice of issues is altered
el_subset <- reactive({
subset_el <- el[el$issue %in% input$issue_choice &
grepl(pattern = paste(input$law_choice, collapse = "|"),
el$article),]
subset_el
})
make_network <- reactive({
plot_el <- el_subset()
net <- network(plot_el)
vertexnames <- get.vertex.attribute(net, "vertex.names")
if (input$label_articles == FALSE){
namevec <- ifelse(vertexnames %in% plot_el$issue, vertexnames, "")
}
if (input$label_articles == TRUE){
namevec <- vertexnames
}
colorvec <- ifelse(vertexnames %in% plot_el$issue, "#a53634","#002903")
return(list(net = net, colorvec = colorvec, namevec = namevec))
})
output$netplot <- renderPlot({
plotting_list <- make_network()
ggnet2(plotting_list$net,
node.color = plotting_list$colorvec,
node.label = plotting_list$namevec,
node.alpha = 0.5)
})
}
shinyApp(ui = ui, server = server)
runApp()
runApp()
